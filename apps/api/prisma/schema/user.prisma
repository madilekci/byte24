enum UserRole {
  admin
  user
}

enum ApplicationRole {
  SUPER_ADMIN
  ADMIN
  USER
}

model User {
  id               String           @id
  name             String
  email            String
  emailVerified    Boolean
  image            String?
  createdAt        DateTime
  updatedAt        DateTime
  twoFactorEnabled Boolean?
  role             UserRole?        @default(user)
  applicationRole  ApplicationRole? @default(ADMIN)
  banned           Boolean?
  banReason        String?
  banExpires       DateTime?
  firstName        String
  lastName         String
  sessions         Session[]
  accounts         Account[]
  twofactors       TwoFactor[]

  views         DataTableView[]
  defaultView   DataTableView?  @relation("defaultView", fields: [defaultViewId], references: [id], onDelete: SetNull)
  defaultViewId String?

  createdCompanies Company[] @relation("createdBy")
  updatedCompanies Company[] @relation("updatedBy")

  createdCompanyStatuses CompanyStatus[] @relation("createdBy")
  updatedCompanyStatuses CompanyStatus[] @relation("updatedBy")

  createdCompanyStatusHistories CompanyStatusHistory[]

  createdCompanyTypes CompanyType[] @relation("createdBy")
  updatedCompanyTypes CompanyType[] @relation("updatedBy")

  createdCompanyContracts CompanyContract[] @relation("createdBy")
  updatedCompanyContracts CompanyContract[] @relation("updatedBy")

  createdContactPersons ContactPerson[] @relation("createdBy")
  updatedContactPersons ContactPerson[] @relation("updatedBy")

  @@unique([email])
  @@map("user")
}

model Session {
  id             String   @id
  expiresAt      DateTime
  token          String
  createdAt      DateTime
  updatedAt      DateTime
  ipAddress      String?
  userAgent      String?
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model TwoFactor {
  id          String @id
  secret      String
  backupCodes String
  userId      String
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("twoFactor")
}
